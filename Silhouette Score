import numpy as np
import pandas as pd
import sklearn.cluster as cluster
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from yellowbrick.cluster import SilhouetteVisualizer
from sklearn.metrics import silhouette_score
from sklearn.cluster import KMeans
from matplotlib import style

plt.style.use ("ggplot") #style must come at the beggining otherwise it wont work. DON'T CHANGE THE LINE POSITION

################DATA FRAME#################

df = pd.read_excel(r"C:\Users\takazone\OneDrive\√Årea de Trabalho\PLANETAS_ATUALIZADO - 2.5.xlsx")

x = np.array (df['DENSITY'])
z = np.array (df['GRAVITY'])
A = np.array(list(zip(x, z)))

############# SILHOUETTE SCORE #############

range_n_clusters = [2, 3, 4, 5, 6, 7, 8, 9] #range of clusters. I recommend the plot of a Elbow Method first cause it will give you a good sense of interval
silhouette_avg = []
for num_clusters in range_n_clusters:
 
 # initialise kmeans
 kmeans = KMeans(n_clusters=num_clusters)
 kmeans.fit(A)
 cluster_labels = kmeans.labels_
 
 # silhouette score
 silhouette_avg.append(silhouette_score(A, cluster_labels))
 
 ########################## GRAPHIC PLOT ####################### 
 
plt.plot(range_n_clusters,silhouette_avg,'bx-', color= 'darkmagenta')
plt.xlabel('Values of K') 
plt.ylabel('Silhouette Score') 
plt.title('Dbscan Silhouette Score for Optimal K')
plt.show()

#################### SILHOUETTE VISUALIZER #######################

#fig, ax = plt.subplots(2, 2, figsize=(15,8))
#for i in [2, 3, 4, 5]:
    '''
    Create KMeans instance for different number of clusters
    '''
    km = KMeans(n_clusters=i, init='k-means++', n_init=10, max_iter=100, random_state=42)
    q, mod = divmod(i, 2)
    '''
    Create SilhouetteVisualizer instance with KMeans instance
    Fit the visualizer
    '''
    visualizer = SilhouetteVisualizer(km, colors='viridis', ax=ax[q-1][mod])
    visualizer.fit(A)

